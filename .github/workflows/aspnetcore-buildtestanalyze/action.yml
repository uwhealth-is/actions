name: ASP.NET Build / Test / Analyze

inputs:
  project_name:
    required: true
    type: string   
  ado_token:
    required: true
  sonar_token:
    required: true
  package_pat:
    required: true
  sonar_exclusions:
    required: false
    type: string
    default: "**/*.bin,**/obj/**,**/wwwroot/dist/**,**/wwwroot/lib/**,**/Migrations/**/*"
  sonar_coverage_exclusions:
    required: false
    type: string
    default: "**/Startup.cs,**/Program.cs,**/wwwroot/**/*.js,**/*Tests.cs"
  nuget_feed_name: 
    required: false
    type: string
    default: 'UWHealth'
  nuget_feed_source: 
    required: false
    type: string
    default: 'https://pkgs.dev.azure.com/uwhealth/_packaging/UWHealth_Package_Feed_Updated/nuget/v3/index.json'
  telerik_feed_name: 
    required: false
    type: string
    default: 'Telerik'
  telerik_feed_source:
    required: false
    type: string
    default: 'https://nuget.telerik.com/v3/index.json'
  nuget_config: 
    required: false
    type: string
    default: 'Nuget.config'
  telerik_user: 
    required: false
    default: ''
  telerik_password: 
    required: false
    default: ''


runs:
  using: "composite" 
  steps:      
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Checkout actions repository
    uses: actions/checkout@v3
    with:
      repository: uwhealth-is/actions
      path: ./.github/uwh-actions
      
  - name: Check for Azure Devops token to determine if telerik is needed in nuget feed
    id: azuredevops
    shell: bash
    run: echo '::set-output name=ado_secret::${{inputs.ado_token}}'

  - name: Update azure devops Nuget.Config entry
    shell: bash
    run: |
      dotnet nuget remove source ${{ inputs.nuget_feed_name }} --configfile ${{ inputs.nuget_config }}
      dotnet nuget add source ${{ inputs.nuget_feed_source }} -n ${{ inputs.nuget_feed_name }} -u az -p ${{ inputs.ado_token }} --configfile ${{ inputs.nuget_config }} --store-password-in-clear-text
    if: steps.azuredevops.outputs.ado_secret != ''

  - name: Check for Telerik Info to determine if telerik is needed in nuget feed
    id: telerik
    shell: bash
    run: echo '::set-output name=telerik_secret::${{inputs.telerik_password}}'

  - name: Update Telerik Nuget.Config entry
    shell: bash
    run: | 
      dotnet nuget remove source ${{ inputs.telerik_feed_name }} --configfile ${{ inputs.nuget_config }}
      dotnet nuget add source ${{ inputs.telerik_feed_source }} -n ${{ inputs.telerik_feed_name }} -u ${{ inputs.telerik_user }} -p ${{ inputs.telerik_password }} --configfile ${{ inputs.nuget_config }} --store-password-in-clear-text
    if: steps.telerik.outputs.telerik_secret != ''
                
  - name: Set up JDK 11
    uses: actions/setup-java@v1
    with:
      java-version: 1.11
    
  - name: Cache SonarCloud packages
    uses: actions/cache@v1
    with:
      path: ~/sonar/cache
      key: ${{ runner.os }}-sonar
      restore-keys: ${{ runner.os }}-sonar
    
  - name: Cache SonarCloud scanner
    id: cache-sonar-scanner
    uses: actions/cache@v1
    with:
      path: ./.sonar/scanner
      key: ${{ runner.os }}-sonar-scanner
      restore-keys: ${{ runner.os }}-sonar-scanner
    
  - name: Install SonarCloud scanner
    if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    shell: pwsh
    run: |
      New-Item -Path ./.sonar/scanner -ItemType Directory
      dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
  - name: Initialize SonarScanner
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ inputs.SONAR_TOKEN }}        
    shell: pwsh
    run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.project_name }}-UWHealth-is" /o:"uwhealth-is" /d:sonar.login="${{ inputs.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions="${{ inputs.sonar_exclusions }}" /d:sonar.coverage.exclusions="${{ inputs.sonar_coverage_exclusions }}" /d:sonar.cs.cobertura.reportsPaths="**/coverage.cobertura.xml"

  - name: Run dotnet build
    uses: ./.github/uwh-actions/.github/workflows/aspnetcore-build
    with:
      project_name: ${{ inputs.project_name }}
      full_solution_build: false
      
  - name: zip publish files
    shell: bash
    run: zip -r ${{ github.workspace }}/build.zip ${{ github.workspace }}
  
  - name: Upload Build Artifact
    if: success()
    uses: actions/upload-artifact@v3
    with:
      name: build
      path: ${{ github.workspace }}/build.zip

  - name: Run dotnet test
    shell: pwsh
    run: dotnet test --logger trx --results-directory TestResults -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:CoverletOutput=coverage -p:ExcludeByFile=**/Views/**/* -p:Exclude=[*]*.Migrations.*
  
  - name: End SonarScanner
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ inputs.SONAR_TOKEN }}
    shell: pwsh
    run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ inputs.SONAR_TOKEN }}"

  - name: SonarQube Quality Gate Check
    env: 
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ inputs.SONAR_TOKEN }} 
    uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
    with:
      scanMetadataReportFile: "${{github.workspace}}/.sonarqube/out/.sonar/report-task.txt"
    if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request'
